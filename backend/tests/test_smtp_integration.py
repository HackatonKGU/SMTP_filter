import smtplib
import time
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from core.config import SMTP_PORT, MAILHOG_HOST, MAILHOG_WEB_PORT
from mailhog_manager import MailHogManager
import requests

def send_test_email(subject: str, body: str, from_addr: str = "test@example.com", 
                   to_addr: str = "recipient@example.com", smtp_port: int = SMTP_PORT):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ —á–µ—Ä–µ–∑ SMTP —Ñ–∏–ª—å—Ç—Ä."""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∏—Å—å–º–æ
        msg = MIMEMultipart()
        msg['From'] = from_addr
        msg['To'] = to_addr
        msg['Subject'] = subject
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
        msg.attach(MIMEText(body, 'plain'))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –Ω–∞—à SMTP —Ñ–∏–ª—å—Ç—Ä
        with smtplib.SMTP('localhost', smtp_port, timeout=10) as server:
            text = msg.as_string()
            server.sendmail(from_addr, [to_addr], text)
            
        print(f"‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {subject[:50]}...")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞: {e}")
        return False

def get_mailhog_messages():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ MailHog."""
    try:
        response = requests.get(f"http://{MAILHOG_HOST}:{MAILHOG_WEB_PORT}/api/v1/messages")
        if response.status_code == 200:
            data = response.json()
            return data.get('items', []), data.get('total', 0)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {response.status_code}")
            return [], 0
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MailHog: {e}")
        return [], 0

def run_integration_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç."""
    print("üß™ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ SMTP –§–ò–õ–¨–¢–† + MailHog")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ MailHog –∑–∞–ø—É—â–µ–Ω
    manager = MailHogManager()
    if not manager.is_running():
        print("‚ùå MailHog –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å–∫–∞—é...")
        if not manager.start():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å MailHog")
            return
        time.sleep(2)
    
    # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ MailHog
    print("üßπ –û—á–∏—â–∞—é —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    manager.clear_messages()
    time.sleep(1)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∏—Å—å–º–∞
    test_emails = [
        {
            "name": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–∏—Å—å–º–æ",
            "subject": "–í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞",
            "body": "–ü—Ä–∏–≤–µ—Ç! –ù–µ –∑–∞–±—É–¥—å –æ –≤—Å—Ç—Ä–µ—á–µ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
            "expected_blocked": False
        },
        {
            "name": "–£–≥—Ä–æ–∑–∞ –≤–∑—Ä—ã–≤–∞",
            "subject": "–í–Ω–∏–º–∞–Ω–∏–µ!",
            "body": "–Ø –≤–∑–æ—Ä–≤—É –∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –≤ 18:00. –í—Å–µ –≥–æ—Ç–æ–≤–æ.",
            "expected_blocked": True
        },
        {
            "name": "–†–∞–±–æ—á–µ–µ –ø–∏—Å—å–º–æ", 
            "subject": "–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É",
            "body": "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É –≥–æ—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
            "expected_blocked": False
        },
        {
            "name": "–£–≥—Ä–æ–∑–∞ —Ç–µ—Ä—Ä–æ—Ä–∏–∑–º–∞",
            "subject": "–û–ø–µ—Ä–∞—Ü–∏—è",
            "body": "Kill everyone in the building tomorrow at 3pm. Bomb is ready.",
            "expected_blocked": True
        },
        {
            "name": "–û–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
            "subject": "–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤",
            "body": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ12345 –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ.",
            "expected_blocked": False
        }
    ]
    
    results = []
    
    print(f"üìß –û—Ç–ø—Ä–∞–≤–ª—è—é {len(test_emails)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–∏—Å–µ–º...")
    print("-" * 60)
    
    initial_count = get_mailhog_messages()[1]
    
    for i, email in enumerate(test_emails, 1):
        print(f"{i}. {email['name']}:")
        print(f"   –¢–µ–º–∞: {email['subject']}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        success = send_test_email(email['subject'], email['body'])
        time.sleep(2)  # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        messages, total_count = get_mailhog_messages()
        received_count = total_count - initial_count
        
        if email['expected_blocked']:
            # –ü–∏—Å—å–º–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (–Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ MailHog)
            if success:
                print("   ‚ùå –û–®–ò–ë–ö–ê: –ü–∏—Å—å–º–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
                results.append("‚ùå FAIL")
            else:
                print("   ‚úÖ –ü–∏—Å—å–º–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                results.append("‚úÖ PASS")
        else:
            # –ü–∏—Å—å–º–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–æ (–ø–æ–ø–∞—Å—Ç—å –≤ MailHog)
            if success and received_count > len([r for r in results if "PASS" in r and "–±–µ–∑–æ–ø–∞—Å–Ω" in email['name']]):
                print(f"   ‚úÖ –ü–∏—Å—å–º–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ –∏ –ø–æ–ª—É—á–µ–Ω–æ –≤ MailHog")
                results.append("‚úÖ PASS") 
            else:
                print(f"   ‚ùå –û–®–ò–ë–ö–ê: –ü–∏—Å—å–º–æ –Ω–µ –¥–æ—à–ª–æ –¥–æ MailHog")
                results.append("‚ùå FAIL")
        
        print()
        initial_count = total_count
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    
    passed = sum(1 for r in results if "PASS" in r)
    failed = sum(1 for r in results if "FAIL" in r)
    
    for i, (email, result) in enumerate(zip(test_emails, results), 1):
        print(f"{i}. {email['name']}: {result}")
    
    print("-" * 60)
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {passed}/{len(test_emails)}")
    print(f"–ü—Ä–æ–≤–∞–ª–∏–≤—à–∏—Ö—Å—è: {failed}/{len(test_emails)}")
    
    if failed == 0:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ MailHog
    messages, total_count = get_mailhog_messages()
    print(f"\nüì¨ –í MailHog –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_count}")
    print(f"üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://{MAILHOG_HOST}:{MAILHOG_WEB_PORT}")

if __name__ == "__main__":
    run_integration_test()