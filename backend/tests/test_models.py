import csv
import time
from typing import List, Tuple
from core.ollama.client import _make_ollama_request, test_ollama_connection
from core.config import OLLAMA_MODEL, OLLAMA_FALLBACK_MODEL, OLLAMA_BACKUP_MODEL

def load_test_dataset(filename: str = 'spam_filter_dataset2.csv', limit: int = 50) -> List[Tuple[str, int]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç."""
    dataset = []
    with open(filename, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for i, row in enumerate(reader):
            if i >= limit:
                break
            dataset.append((row['text'], int(row['label'])))
    return dataset

def test_model(model_name: str, dataset: List[Tuple[str, int]]) -> dict:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç–µ."""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_name}")
    print("=" * 50)
    
    correct = 0
    total = 0
    errors = 0
    true_positives = 0  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —É–≥—Ä–æ–∑—ã
    false_positives = 0  # –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
    true_negatives = 0   # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ
    false_negatives = 0  # –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —É–≥—Ä–æ–∑—ã
    
    start_time = time.time()
    
    for text, true_label in dataset:
        total += 1
        prediction = _make_ollama_request(text, model_name)
        
        if prediction is None:
            errors += 1
            prediction = 0  # –°—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫–∏ –∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ
        
        # –ü–æ–¥—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
        if prediction == true_label:
            correct += 1
            if true_label == 1:
                true_positives += 1
            else:
                true_negatives += 1
        else:
            if prediction == 1 and true_label == 0:
                false_positives += 1
            elif prediction == 0 and true_label == 1:
                false_negatives += 1
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
        if total % 10 == 0:
            print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total}/{len(dataset)} | –¢–æ—á–Ω–æ—Å—Ç—å: {correct/total:.1%}")
    
    end_time = time.time()
    
    # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    accuracy = correct / total if total > 0 else 0
    precision = true_positives / (true_positives + false_positives) if (true_positives + false_positives) > 0 else 0
    recall = true_positives / (true_positives + false_negatives) if (true_positives + false_negatives) > 0 else 0
    f1_score = 2 * (precision * recall) / (precision + recall) if (precision + recall) > 0 else 0
    
    result = {
        'model': model_name,
        'accuracy': accuracy,
        'precision': precision,
        'recall': recall,
        'f1_score': f1_score,
        'total': total,
        'correct': correct,
        'errors': errors,
        'time': end_time - start_time,
        'true_positives': true_positives,
        'false_positives': false_positives,
        'true_negatives': true_negatives,
        'false_negatives': false_negatives
    }
    
    return result

def print_results(results: dict):
    """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¥–ª—è {results['model']}:")
    print(f"   –¢–æ—á–Ω–æ—Å—Ç—å (Accuracy): {results['accuracy']:.1%}")
    print(f"   –ü–æ–ª–Ω–æ—Ç–∞ (Recall): {results['recall']:.1%}")
    print(f"   –¢–æ—á–Ω–æ—Å—Ç—å (Precision): {results['precision']:.1%}")
    print(f"   F1-Score: {results['f1_score']:.3f}")
    print(f"   –í—Ä–µ–º—è: {results['time']:.1f} —Å–µ–∫")
    print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {results['correct']}/{results['total']}")
    print(f"   –û—à–∏–±–æ–∫: {results['errors']}")
    print()
    print(f"   –ù–∞–π–¥–µ–Ω–æ —É–≥—Ä–æ–∑: {results['true_positives']}")
    print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ —É–≥—Ä–æ–∑: {results['false_negatives']}")
    print(f"   –õ–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π: {results['false_positives']}")
    print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö: {results['true_negatives']}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π Ollama")
    
    if not test_ollama_connection():
        print("‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç (–ø–µ—Ä–≤—ã–µ 50 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    print("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
    dataset = load_test_dataset(limit=50)
    print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(dataset)} –∑–∞–ø–∏—Å–µ–π")
    
    safe_count = sum(1 for _, label in dataset if label == 0)
    threat_count = sum(1 for _, label in dataset if label == 1)
    print(f"   –ë–µ–∑–æ–ø–∞—Å–Ω—ã—Ö: {safe_count}, –£–≥—Ä–æ–∑: {threat_count}")
    
    # –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    models = [OLLAMA_MODEL, OLLAMA_FALLBACK_MODEL, OLLAMA_BACKUP_MODEL]
    all_results = []
    
    for model in models:
        try:
            result = test_model(model, dataset)
            print_results(result)
            all_results.append(result)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {model}: {e}")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    print("\nüèÜ –°–†–ê–í–ù–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô:")
    print("=" * 60)
    print(f"{'–ú–æ–¥–µ–ª—å':<30} {'–¢–æ—á–Ω–æ—Å—Ç—å':<12} {'F1-Score':<12} {'–í—Ä–µ–º—è':<10}")
    print("-" * 60)
    
    for result in all_results:
        model_short = result['model'].split(':')[0]
        print(f"{model_short:<30} {result['accuracy']:<11.1%} {result['f1_score']:<11.3f} {result['time']:<9.1f}s")

if __name__ == "__main__":
    main()